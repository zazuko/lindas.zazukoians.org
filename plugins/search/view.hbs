<div class="trifid-content">
  <div class="container">
    <h1>Datasets</h1>

    <style type="text/css">
      @import url("/static-assets/search.css");
    </style>

    <input id="datasets-search" type="text" placeholder="Search…" />
    <div id="datasets-results"></div>
    <div id="datasets-results-count"></div>

    <script>
      const currentLanguage = "{{ currentLanguage }}";
      const defaultLanguage = "{{ defaultLanguage }}";

      // query to fetch the number of records
      const numberOfResultsQuery = (baseUrl) => {
        return `
          PREFIX schema: <http://schema.org/>
          PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
          prefix void:   <http://rdfs.org/ns/void#>

          SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE {
            ?sub (schema:name|schema:decription) ?name;
              rdf:type ?resultType.
            FILTER(?resultType IN(void:Dataset))
            FILTER(NOT EXISTS { ?sub schema:expires ?x. })
            FILTER(NOT EXISTS { ?sub schema:creativeWorkStatus <${baseUrl}/definedTerm/CreativeWorkStatus/Draft>. })
          }
        `;
      }

      // get the different records
      const resultsQuery = (baseUrl) => {
        return `
          PREFIX schema: <http://schema.org/>
          PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
          prefix void:   <http://rdfs.org/ns/void#>

          SELECT * WHERE {
            ?sub schema:name ?name.
            ?sub rdf:type ?resultType.

            OPTIONAL {
              ?sub schema:description ?description.
            }

            FILTER(?resultType IN(void:Dataset))
            FILTER(NOT EXISTS { ?sub schema:expires ?x. })
            FILTER(NOT EXISTS { ?sub schema:creativeWorkStatus <${baseUrl}/definedTerm/CreativeWorkStatus/Draft>. })
          }
        `;
      }

      // run a SPARQL query
      const queryHeaders = new Headers();
      queryHeaders.set("Accept", "application/sparql-results+json");
      queryHeaders.set("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
      const runQuery = async (endpoint, query) => {
        const form = new FormData();
        form.set("query", query);

        const res = await fetch(endpoint, {
          headers: queryHeaders,
          method: 'POST',
          body: new URLSearchParams(form),
        });
        const json = await res.json();

        return json;
      }

      const currentUrl = new URL("/", window.location.href);
      const queryEndpoint = new URL("/query", window.location.href);
      const baseUrl = currentUrl.origin;

      let numberOfRecords = 0;
      let datasetsList = [];

      const getNumberOfRecords = async () => {
        const res = await runQuery(queryEndpoint, numberOfResultsQuery(baseUrl));
        if (!res.results || !res.results.bindings || !Array.isArray(res.results.bindings)) {
          return 0;
        }

        const firstRow = res.results.bindings[0];
        if (!firstRow.count || !firstRow.count.value) {
          return 0;
        }

        const count = parseInt(firstRow.count.value, 10);

        return count;
      }

      const extractLanguage = (row) => {
        if (!row || !row["xml:lang"]) {
          return "default";
        }

        return row["xml:lang"];
      }

      const getLocalizedValue = (entry, language = "de") => {
        if (!entry) {
          return "";
        }

        if (entry[language]) {
          return entry[language];
        }

        if (entry[defaultLanguage]) {
          return entry[defaultLanguage];
        }

        if (entry["default"]) {
          return entry["default"];
        }

        if (entry["de"]) {
          return entry["de"];
        }

        if (entry["fr"]) {
          return entry["fr"];
        }

        if (entry["it"]) {
          return entry["it"];
        }

        if (entry["en"]) {
          return entry["en"];
        }
      }

      const getResults = async () => {
        const res = await runQuery(queryEndpoint, resultsQuery(baseUrl));
        if (!res.results || !res.results.bindings || !Array.isArray(res.results.bindings)) {
          return [];
        }

        const rows = res.results.bindings;
        const subs = {};

        rows.map((row) => {
          if (!row.sub) {
            return;
          }

          const sub = row.sub;
          if (!sub.type || sub.type !== "uri" || !sub.value) {
            return;
          }
          const subValue = sub.value;

          if (!subs[subValue]) {
            subs[subValue] = {
              name: {},
              description: {},
            };
          }

          const { name, description } = row;
          subs[subValue].name[extractLanguage(name)] = name?.value || null;
          subs[subValue].description[extractLanguage(description)] = description?.value || null;
        });

        return subs;
      }

      const updateDatasetsList = (results, language = "de") => {
        // reset array
        datasetsList = [];

        Object.entries(results).map((result) => {
          const entry = result[1];

          const name = getLocalizedValue(entry.name, language);
          const description = getLocalizedValue(entry.description, language);

          datasetsList.push({
            name,
            description,
          });
        });
      }

      const datasetsResultsElem = document.getElementById("datasets-results");
      const datasetsResultsCountElem = document.getElementById("datasets-results-count");
      const datasetsSearchElem = document.getElementById("datasets-search");

      const displayResults = () => {
        datasetsResultsElem.textContent = "";

        const searchValue = datasetsSearchElem.value.trim().toLocaleLowerCase();

        datasetsList
          .filter((dataset) => {
            if (!searchValue) {
              return true;
            }

            return dataset.name?.toLocaleLowerCase().includes(searchValue)
              || dataset.description?.toLocaleLowerCase().includes(searchValue);
          })
          .map((dataset) => {
            const datasetNameElem = document.createElement("p");
            datasetNameElem.textContent = dataset.name;
            datasetNameElem.className = "trifid-datasets-search-name";

            const datasetDescriptionElem = document.createElement("p");
            datasetDescriptionElem.textContent = dataset.description;
            datasetDescriptionElem.className = "trifid-datasets-search-description";

            const datasetElem = document.createElement("div");
            datasetElem.className = "trifid-datasets-search-item";
            datasetElem.appendChild(datasetNameElem);
            datasetElem.appendChild(datasetDescriptionElem);
            datasetsResultsElem.appendChild(datasetElem);
          });
      }

      datasetsSearchElem.addEventListener("change", displayResults);
      datasetsSearchElem.addEventListener("keydown", displayResults);
      datasetsSearchElem.addEventListener("keyup", displayResults);

      (async () => {
        datasetsResultsElem.textContent = "Loading…";

        try {
          // get the number of results
          numberOfRecords = await getNumberOfRecords();
          datasetsResultsCountElem.textContent = `${numberOfRecords} results`;

          // depending of the number, load the results
          const results = await getResults();
          updateDatasetsList(results, currentLanguage);
          displayResults();
        } catch (_e) {
          datasetsResultsElem.textContent = "Something went wrong while fetching the list of datasets. Please retry later.";
        }
      })();
    </script>
  </div>
</div>
